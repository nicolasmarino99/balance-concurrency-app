const axios = require('axios');
const { performance } = require('perf_hooks');

const BASE_URL = 'http://localhost:3001';
const USER_ID = 1;
const REQUESTS = 10000;
const AMOUNT_PER_REQUEST = -2;

async function resetBalance() {
  try {
    await axios.post(`${BASE_URL}/balance/reset`, { 
      userId: USER_ID,
      balance: 10000 
    });
    console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω –¥–æ 10000');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞:', error.message);
    process.exit(1);
  }
}

async function runConcurrencyTest() {
  console.log('üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç—É...');
  await resetBalance();

  const requests = Array(REQUESTS).fill().map(() => 
    axios.post(`${BASE_URL}/balance/update`, {
      userId: USER_ID,
      amount: AMOUNT_PER_REQUEST
    })
    .then(res => ({ success: true, data: res.data }))
    .catch(err => ({ 
      success: false, 
      error: err.response?.data || err.message 
    }))
  );

  console.log(`üöÄ –ó–∞–ø—É—Å–∫ ${REQUESTS} –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...`);
  const startTime = performance.now();

  const results = await Promise.allSettled(requests);
  
  const duration = (performance.now() - startTime) / 1000;
  const successful = results.filter(r => r.value?.success).length;
  const failed = results.filter(r => !r.value?.success).length;

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:');
  console.log(`‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)} —Å–µ–∫`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successful}`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${failed}`);

  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');
  try {
    const response = await axios.get(`${BASE_URL}/balance/${USER_ID}`);
    console.log(`üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${response.data.balance}`);
    console.log(`üìå –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å: 0`)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞:', error.message);
  }
}

runConcurrencyTest().catch(console.error);